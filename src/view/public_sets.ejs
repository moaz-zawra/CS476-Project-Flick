<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Flick | Public Sets</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="/js/color-scheme.js"></script>
  <script src="/js/categories.js"></script>
  <script src="/js/status-handler.js"></script>
  <script src="/js/dashboard.js"></script>
  <script>
    tailwind.config = window.tailwindConfig;
  </script>
</head>

<body class="p-4 bg-bg-light dark:bg-bg-dark min-h-screen">

  <%- include('partials/header') %>
  <%- include('partials/status-message') %>

  <div class="flex justify-between items-center mt-4 p-6">
    <a href="/account">
      <div class="flex items-center">
        <div class="w-10 h-10 bg-gray-300 dark:bg-gray-600 rounded-full flex items-center justify-center mr-4 font-mono text-xl text-accent-light dark:text-accent-dark font-bold hover:shadow-lg hover:bg-gray-200 dark:hover:bg-gray-500 transition-all duration-200">
          <%= user.username.charAt(0).toUpperCase() %>
        </div>
        <div class="font-mono text-2xl text-accent-light dark:text-accent-dark">
          <b><%= user.username %></b>
        </div>
      </div>
    </a>
    <a href="/" class="border-2 rounded-xl px-4 py-2 bg-main-button-light dark:bg-main-button-dark text-text-light dark:text-text-dark font-bold hover:bg-highlight-light dark:hover:bg-highlight-dark transition-all duration-200">
      Dashboard
    </a>
  </div>

  <main>
    <div class="p-2 bg-surface-light dark:bg-surface-dark rounded-md border-2 border-accent-light dark:border-accent-dark p-6 mt-6">
      <div id="set-bar-public" class="flex flex-col md:flex-row items-start md:items-center justify-between mb-4">
        <span class="font-mono text-2xl text-accent-light dark:text-accent-dark">Public Flashcard Sets</span>
        <div class="flex items-center space-x-2 mt-2 md:mt-0">
          <input type="text" id="nameFilter" placeholder="Search by name..."
            class="font-mono py-1.5 px-3 text-text-light dark:text-text-dark border-2 border-accent-light dark:border-accent-dark rounded-lg focus:outline-none shadow-sm bg-surface-light dark:bg-surface-dark">
          <div class="flex items-center space-x-2">
            <select id="categoryFilter"
              class="font-mono py-1.5 px-3 text-text-light dark:text-text-dark border-2 border-accent-light dark:border-accent-dark rounded-lg focus:outline-none shadow-sm bg-surface-light dark:bg-surface-dark">
              <option value="">All Categories</option>
            </select>
            <select id="subcategoryFilter"
              class="font-mono py-1.5 px-3 text-text-light dark:text-text-dark border-2 border-accent-light dark:border-accent-dark rounded-lg focus:outline-none shadow-sm bg-surface-light dark:bg-surface-dark hidden">
              <option value="">All Subcategories</option>
            </select>
            <button id="applyFilters"
              class="border-2 rounded-xl px-4 py-1.5 bg-main-button-light dark:bg-main-button-dark text-text-light dark:text-text-dark font-bold hover:bg-highlight-light dark:hover:bg-highlight-dark transition-all duration-200">
              Apply
            </button>
          </div>
        </div>
      </div>
      <hr class="border-accent-light dark:border-accent-dark mb-4">

      <div id="public-sets-container" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
        <% if (typeof publicSets !== 'undefined' && Array.isArray(publicSets) && publicSets.length > 0) { %>
          <!-- Public sets will be inserted by script -->
        <% } else { %>
          <div class="col-span-full font-mono text-lg text-accent-light dark:text-accent-dark py-2 text-center">
            No public sets available yet.
          </div>
        <% } %>
      </div>
    </div>
  </main>

  <div id="report-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
    <div class="bg-surface-light dark:bg-surface-dark p-6 rounded-lg shadow-lg w-2/3 md:w-1/2">
      <h2 class="text-xl font-bold mb-4 text-text-light dark:text-text-dark">Report Set</h2>
      <textarea id="reason-input"
        class="w-full p-2 border-2 border-accent-light dark:border-accent-dark rounded-md bg-surface-light dark:bg-surface-dark text-text-light dark:text-text-dark"
        placeholder="Enter reason for reporting" rows="4"></textarea>
      <div class="flex justify-end mt-4 gap-2">
        <button id="cancel-report"
          class="border-2 rounded-xl px-4 py-2 bg-secondary-button-light dark:bg-secondary-button-dark text-text-light dark:text-text-dark font-bold hover:bg-highlight-light dark:hover:bg-highlight-dark transition-all duration-200">
          Cancel
        </button>
        <button id="confirm-report"
          class="border-2 rounded-xl px-4 py-2 bg-main-button-light dark:bg-main-button-dark text-text-light dark:text-text-dark font-bold hover:bg-highlight-light dark:hover:bg-highlight-dark transition-all duration-200">
          Report
        </button>
      </div>
    </div>
  </div>

  <script>
    window.categoryNames = <%- JSON.stringify(categoryNames) %>;
    window.subcategoriesData = <%- JSON.stringify(subcategories) %>;

    let reportingSetId = null;
    function reportPublicSet(setId) {
      reportingSetId = setId;
      document.getElementById('report-modal').classList.remove('hidden');
    }

    document.addEventListener('DOMContentLoaded', function () {
      // Initialize filter components
      const categoryFilter = document.getElementById('categoryFilter');
      const subcategoryFilter = document.getElementById('subcategoryFilter');
      const nameFilter = document.getElementById('nameFilter');
      const applyFiltersBtn = document.getElementById('applyFilters');
      
      // Initialize filters if they exist
      if (categoryFilter && subcategoryFilter) {
        // Keep the original "All Categories" option
        const originalHTML = categoryFilter.innerHTML;
        
        // Populate category dropdown
        populateCategoryDropdown(categoryFilter, window.categoryNames);
        
        // Ensure we keep the "All Categories" option at the top
        if (!categoryFilter.querySelector('option[value=""]')) {
          categoryFilter.innerHTML = originalHTML + categoryFilter.innerHTML;
        }
        categoryFilter.value = "";
        
        // Set up category change handler
        categoryFilter.addEventListener('change', function () {
          const hasSubcategories = populateSubcategoryDropdown(
            this.value,
            subcategoryFilter,
            window.subcategoriesData
          );
          
          // Show subcategory dropdown only if there are subcategories available
          subcategoryFilter.classList.toggle('hidden', !hasSubcategories);
          subcategoryFilter.disabled = !hasSubcategories;
        });
        
        // Set up filter button
        if (applyFiltersBtn) {
          applyFiltersBtn.addEventListener('click', function() {
            filterPublicSets();
          });
        }
        
        // Set up name filter
        if (nameFilter) {
          // Filter on Enter key
          nameFilter.addEventListener('keyup', function (e) {
            if (e.key === 'Enter') {
              filterPublicSets();
            }
          });
        }
      }

      // Report modal handlers
      const cancelReport = document.getElementById('cancel-report');
      const confirmReport = document.getElementById('confirm-report');
      if (cancelReport && confirmReport) {
        cancelReport.addEventListener('click', function () {
          document.getElementById('report-modal').classList.add('hidden');
          document.getElementById('reason-input').value = '';
          reportingSetId = null;
        });
        confirmReport.addEventListener('click', function () {
          const reason = document.getElementById('reason-input').value;
          if (!reason.trim()) {
            alert('Please enter a reason for reporting');
            return;
          }
          if (reportingSetId) {
            const form = document.createElement('form');
            form.action = '/api/reportSet';
            form.method = 'post';
            form.style.display = 'none';

            const reasonInput = document.createElement('input');
            reasonInput.type = 'hidden';
            reasonInput.name = 'reason';
            reasonInput.value = reason;

            const setIdInput = document.createElement('input');
            setIdInput.type = 'hidden';
            setIdInput.name = 'setID';
            setIdInput.value = reportingSetId;

            form.appendChild(reasonInput);
            form.appendChild(setIdInput);
            document.body.appendChild(form);
            form.submit();
          }
          document.getElementById('report-modal').classList.add('hidden');
        });
      }
    });

    function filterPublicSets() {
      const nameFilterVal = document.getElementById('nameFilter').value.toLowerCase();
      const categoryVal = document.getElementById('categoryFilter').value;
      const subcategoryVal = document.getElementById('subcategoryFilter').value;
      const container = document.getElementById('public-sets-container');
      
      if (!container) return;
      
      const sets = container.querySelectorAll('.set-item');
      
      sets.forEach(set => {
        const setName = set.getAttribute('data-name');
        const setCategory = set.getAttribute('data-category');
        const setSubcategory = set.getAttribute('data-subcategory');
        let showSet = true;

        if (nameFilterVal && !setName.includes(nameFilterVal)) {
          showSet = false;
        }
        if (showSet && categoryVal && categoryVal !== '' && setCategory !== categoryVal) {
          showSet = false;
        }
        if (showSet && subcategoryVal && subcategoryVal !== '' && setSubcategory !== subcategoryVal) {
          showSet = false;
        }
        set.style.display = showSet ? '' : 'none';
      });

      // Show or hide "no results" message
      const visibleSets = container.querySelectorAll('.set-item:not([style*="display: none"])');
      let noResultsMessage = document.getElementById('no-results-message');
      
      if (visibleSets.length === 0) {
        if (!noResultsMessage) {
          noResultsMessage = document.createElement('div');
          noResultsMessage.id = 'no-results-message';
          noResultsMessage.className = 'col-span-full font-mono text-lg text-accent-light dark:text-accent-dark py-2 text-center';
          noResultsMessage.innerText = 'No matching sets found.';
          container.appendChild(noResultsMessage);
        }
      } else if (noResultsMessage) {
        noResultsMessage.remove();
      }
    }
  </script>
  
  <!-- Insert public sets using insertSet function -->
  <% if (typeof publicSets !== 'undefined' && Array.isArray(publicSets)) { %>
    <% publicSets.forEach(function(set, index) { %>
      <script>
        const publicSetData<%= index %> = <%- JSON.stringify(set) %>;
        insertSet(
          publicSetData<%= index %>.setID,
          publicSetData<%= index %>.setName,
          publicSetData<%= index %>.description,
          publicSetData<%= index %>.category,
          publicSetData<%= index %>.subCategory,
          false, // not shared
          true,  // is public
          publicSetData<%= index %>.approved,
          'public', // set type
          'public-sets-container', // container ID
          publicSetData<%= index %>.ownerID ? (publicSetData<%= index %>.ownerID.username || publicSetData<%= index %>.ownerID.email) : 'Anonymous',
          publicSetData<%= index %>.views,
          publicSetData<%= index %>.creation_date
        );
      </script>
    <% }); %>
  <% } %>
</body>

</html>