<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Flick | Dashboard</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="/js/categories.js"></script>
</head>
<body class="p-4 bg-[#31572C]">

<header>
    <div class="inline text-white font-extrabold text-3xl font-mono">
        <span class="text-[#ECF39E]"> flick </span>
        <div id="header-buttons" class="float-right flex flex-col space-y-1">
            <button id="account-button" onclick="window.location.href='/account'" class="text-xs text-[#90A955] hover:text-[#ECF39E]">account</button>
            <button id="logout-button" onclick="window.location.href='/api/v2/logout'" class="text-xs text-[#90A955] hover:text-[#ECF39E]">logout</button>
        </div>
        <br />
        <span class="text-[#ECF39E] text-sm">your flashcards are a click away!</span>
    </div>
    <hr class="border-white">
</header>

<div class="font-mono mt-7 text-2xl text-[#ECF39E]"> Welcome, <%=user.username%> </div>
<br />

<div id="user-cardsets" class="p-2 bg-[#ECF39E] rounded-md border-2 border-black">
    <div id="set-bar-user" class="flex items-center justify-between">
        <span class="font-mono text-2xl">My Card Sets</span>
        <div class="flex items-center space-x-2">
            <button onclick="window.location.href='/new_set'" class="relative group p-1">
                <img src="add.svg" alt="Plus Icon" class="w-9 h-9">
                <span class="absolute left-full ml-2 bg-black text-white text-xs font-semibold px-2 py-1 rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 whitespace-nowrap">
                            New Card Set
                        </span>
            </button>
            <select id="categoryFilter" class="font-mono py-1.5 px-3 text-gray-800 border-2 border-black rounded-lg focus:outline-none shadow-sm bg-sky-50">
                <option value="">All Categories</option>
                <option value="0">Language</option>
                <option value="1">Technology</option>
                <option value="2">Course Subjects</option>
                <option value="3">Law</option>
                <option value="4">Medical</option>
                <option value="5">Military</option>
            </select>
            <select id="subcategoryFilter" class="font-mono py-1.5 px-3 text-gray-800 border-2 border-black rounded-lg focus:outline-none shadow-sm bg-sky-50 hidden">
                <option value="">All Subcategories</option>
            </select>
        </div>
    </div>
    <hr class="border-black border mt-2">
    <div id="user-sets" class="inline p-2"></div>
</div>
<br />
<div id="shared-cardsets" class="p-2 bg-[#ECF39E] rounded-md border-2 border-black">
    <div id="set-bar-shared" class="flex items-center justify-between">
        <span class=" font-mono text-2xl">Sets Shared with me</span><br />
        <div class="flex items-center space-x-2">
            <select id="sharedCategoryFilter" class="font-mono py-1.5 px-3 text-gray-800 border-2 border-black rounded-lg focus:outline-none shadow-sm bg-sky-50">
                <option value="">All Categories</option>
                <option value="0">Language</option>
                <option value="1">Technology</option>
                <option value="2">Course Subjects</option>
                <option value="3">Law</option>
                <option value="4">Medical</option>
                <option value="5">Military</option>
            </select>
            <select id="sharedSubcategoryFilter" class="font-mono py-1.5 px-3 text-gray-800 border-2 border-black rounded-lg focus:outline-none shadow-sm bg-sky-50 hidden">
                <option value="">All Subcategories</option>
            </select>
        </div>
    </div>
    <hr class="border-black border mt-2">
    <div id="shared-sets"></div>
</div>

<!-- Modal for deletion confirmation -->
<div id="confirmation-modal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 hidden">
    <div class="bg-[#31572C] p-8 rounded-lg shadow-lg w-1/3 text-center">
        <p id="confirmation-message" class="text-lg font-mono text-[#ECF39E] mb-4"></p>
        <div class="flex justify-around">
            <button id="confirm-delete" class="bg-[#90a955] text-black p-2 rounded-md hover:bg-[#ecf39e]">Yes</button>
            <button id="cancel-delete" class="bg-[#90a955] text-black p-2 rounded-md hover:bg-[#ecf39e]">No</button>
        </div>
    </div>
</div>

<!-- Modal for share -->
<div id="share-modal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 hidden">
    <div class="bg-[#31572C] p-8 rounded-lg shadow-lg w-1/3 text-center">
        <p id="share-message" class="text-lg font-mono text-[#ECF39E] mb-4">Share this set with a user:</p>
        <input id="username-input" type="text" placeholder="Enter username" class="font-mono py-1.5 px-3 text-gray-800 border-2 border-black rounded-lg focus:outline-none shadow-sm bg-sky-50 placeholder-gray-600 mb-4 w-full">
        <div class="flex justify-around">
            <button id="confirm-share" class="bg-[#90a955] text-black p-2 rounded-md hover:bg-[#ecf39e]">Share</button>
            <button id="cancel-share" class="bg-[#90a955] text-black p-2 rounded-md hover:bg-[#ecf39e]">Cancel</button>
        </div>
    </div>
</div>
<br />
</body>

<script>
    function handleShareButtonClick(setID) {
        document.getElementById('share-modal').classList.remove('hidden');

        document.getElementById('confirm-share').onclick = async () => {
            const username = document.getElementById('username-input').value;
            if (username) {
                const response = await fetch('/api/v2/shareSet', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ setID, username })
                });
                if (response.ok) {
                    alert(`Set shared with ${username}`);
                    document.getElementById('share-modal').classList.add('hidden');
                } else {
                    alert('Failed to share set.');
                }
            } else {
                alert('Please enter a username');
            }
        };

        document.getElementById('cancel-share').onclick = () => {
            document.getElementById('share-modal').classList.add('hidden');
        };
    }
    // Function to insert a set into the DOM
    function insertSet(setID, setName, category, subCategory, description, shared) {
        // Create the main div container for the set
        const setDiv = document.createElement('div');
        setDiv.className = 'inline-flex flex-col items-start bg-[#90A955] p-4 border-2 border-black rounded-md m-2 w-72';
        setDiv.dataset.category = category;
        setDiv.dataset.subcategory = subCategory;

        // Create and populate the set name section
        const setNameDiv = document.createElement('div');
        setNameDiv.className = 'flex items-center gap-2 w-full mb-3';

        // Set name display
        const setNameSpan = document.createElement('span');
        setNameSpan.className = 'font-mono font-bold text-[#ECF39E] text-xl truncate';
        setNameSpan.textContent = setName;
        setNameDiv.appendChild(setNameSpan);

        // Play Button
        const playButton = document.createElement('button');
        playButton.className = 'relative group flex items-center justify-center p-1 bg-[#ECF39E] border-2 border-black rounded-md hover:bg-[#CFE892] ml-auto';
        playButton.onclick = () => { window.location.href = `/view_set?setID=${setID}`; };

        const playImg = document.createElement('img');
        playImg.src = 'play.svg';
        playImg.alt = 'Play Icon';
        playImg.className = 'w-6 h-6';
        playButton.appendChild(playImg);

        const playSpan = document.createElement('span');
        playSpan.className = 'absolute top-full left-1/2 -translate-x-1/2 mt-1 bg-black text-white text-xs font-semibold px-2 py-1 rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 whitespace-nowrap z-10';
        playSpan.textContent = 'Play Set';
        playButton.appendChild(playSpan);

        setNameDiv.appendChild(playButton);

        // Create the category section with improved styling
        const categoryDiv = document.createElement('div');
        categoryDiv.className = 'flex flex-col gap-1 mb-3 w-full';
        
        // Category tag with new styling
        const categorySpan = document.createElement('span');
        categorySpan.className = 'bg-[#4F772D] text-[#ECF39E] px-3 py-1.5 rounded-lg text-sm font-semibold inline-block w-fit';
        categorySpan.textContent = getCategoryName(category);
        categoryDiv.appendChild(categorySpan);

        // Subcategory tag with new styling
        const subCategorySpan = document.createElement('span');
        subCategorySpan.className = 'text-[#ECF39E] text-sm font-medium bg-[#4F772D] bg-opacity-50 px-3 py-1 rounded-lg inline-block w-fit';
        subCategorySpan.textContent = subCategory;
        categoryDiv.appendChild(subCategorySpan);

        // Description section with improved styling
        const descriptionDiv = document.createElement('div');
        descriptionDiv.className = 'w-full mb-3 bg-[#4F772D] bg-opacity-30 p-3 rounded-lg';
        const descriptionText = document.createElement('p');
        descriptionText.className = 'text-[#ECF39E] text-sm leading-relaxed';
        descriptionText.textContent = description;
        descriptionDiv.appendChild(descriptionText);

        // Create the buttons section (Share, Edit, Delete)
        const buttonsDiv = document.createElement('div');
        buttonsDiv.className = 'flex items-center gap-2 justify-between mt-auto w-full';

        // Button Styling
        const buttonBaseClass = 'relative group flex items-center justify-center p-1 bg-[#ECF39E] border-2 border-black rounded-md hover:bg-[#CFE892]';

        const shareButton = document.createElement('button');
        shareButton.className = buttonBaseClass;
        shareButton.onclick = () => {
            handleShareButtonClick(setID);
        };

        const shareImg = document.createElement('img');
        shareImg.src = 'share.svg';
        shareImg.alt = 'Share Icon';
        shareImg.className = 'w-6 h-6';
        shareButton.appendChild(shareImg);

        const shareSpan = document.createElement('span');
        shareSpan.className = 'absolute top-full left-1/2 -translate-x-1/2 mt-1 bg-black text-white text-xs font-semibold px-2 py-1 rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 whitespace-nowrap z-10';
        shareSpan.textContent = 'Share Set';
        shareButton.appendChild(shareSpan);

        // Edit Button
        const editButton = document.createElement('button');
        editButton.className = buttonBaseClass;
        editButton.onclick = () => { window.location.href = `/edit_set?setID=${setID}`; };

        const editImg = document.createElement('img');
        editImg.src = 'edit.svg';
        editImg.alt = 'Edit Icon';
        editImg.className = 'w-6 h-6';
        editButton.appendChild(editImg);

        const editSpan = document.createElement('span');
        editSpan.className = 'absolute top-full left-1/2 -translate-x-1/2 mt-1 bg-black text-white text-xs font-semibold px-2 py-1 rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 whitespace-nowrap z-10';
        editSpan.textContent = 'Edit Set';
        editButton.appendChild(editSpan);

        const deleteForm = document.createElement('form');
        deleteForm.action = '/api/v2/deleteSet';
        deleteForm.method = 'POST';

        const setIdInput = document.createElement('input');
        setIdInput.type = 'hidden';
        setIdInput.name = 'setID';
        setIdInput.value = setID;

        deleteForm.appendChild(setIdInput);

        const deleteButton = document.createElement('button');
        deleteButton.type = 'button';
        deleteButton.className = buttonBaseClass;

        deleteForm.appendChild(deleteButton);
        document.body.appendChild(deleteForm);

        deleteButton.onclick = (event) => {
            event.preventDefault();
            document.getElementById('confirmation-modal').classList.remove('hidden');
            document.getElementById('confirmation-message').textContent = `Do you want to delete the set "${setName}"?`;

            const confirmButton = document.getElementById('confirm-delete');
            confirmButton.onclick = () => {
                deleteForm.submit();
            };
        };

        const deleteImg = document.createElement('img');
        deleteImg.src = 'delete.svg';
        deleteImg.alt = 'Delete Icon';
        deleteImg.className = 'w-6 h-6';
        deleteButton.appendChild(deleteImg);

        const deleteSpan = document.createElement('span');
        deleteSpan.className = 'absolute top-full left-1/2 -translate-x-1/2 mt-1 bg-black text-white text-xs font-semibold px-2 py-1 rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 whitespace-nowrap z-10';
        deleteSpan.textContent = 'Delete Set';
        deleteButton.appendChild(deleteSpan);

        // Append buttons to button container
        buttonsDiv.appendChild(shareButton);
        buttonsDiv.appendChild(editButton);
        buttonsDiv.appendChild(deleteButton);

        // Append everything to the main set div
        setDiv.appendChild(setNameDiv);
        setDiv.appendChild(categoryDiv);
        setDiv.appendChild(descriptionDiv);
        setDiv.appendChild(buttonsDiv);

        // Append to the correct container
        const container = shared ? document.getElementById('shared-sets') : document.getElementById('user-sets');
        container.appendChild(setDiv);
    }

    // Filter sets by category and subcategory
    function filterSets(containerId, categoryValue, subcategoryValue) {
        const container = document.getElementById(containerId);
        const sets = container.querySelectorAll('div[data-category]');
        
        sets.forEach(set => {
            const matchesCategory = !categoryValue || set.dataset.category === categoryValue;
            const matchesSubcategory = !subcategoryValue || set.dataset.subcategory === subcategoryValue;
            
            if (matchesCategory && matchesSubcategory) {
                set.style.display = 'inline-flex';
            } else {
                set.style.display = 'none';
            }
        });
    }

    // Add event listeners for category filters
    document.getElementById('categoryFilter').addEventListener('change', function() {
        const categoryValue = this.value;
        const subcategoryDropdown = document.getElementById('subcategoryFilter');
        
        // Populate subcategory dropdown
        populateSubcategory(categoryValue, '', 'subcategoryFilter');
        
        // Show/hide subcategory dropdown
        if (categoryValue) {
            subcategoryDropdown.classList.remove('hidden');
        } else {
            subcategoryDropdown.classList.add('hidden');
        }
        
        // Apply filters
        filterSets('user-sets', categoryValue, '');
    });

    document.getElementById('subcategoryFilter').addEventListener('change', function() {
        const categoryValue = document.getElementById('categoryFilter').value;
        const subcategoryValue = this.value;
        
        // Apply filters
        filterSets('user-sets', categoryValue, subcategoryValue);
    });

    document.getElementById('sharedCategoryFilter').addEventListener('change', function() {
        const categoryValue = this.value;
        const subcategoryDropdown = document.getElementById('sharedSubcategoryFilter');
        
        // Populate subcategory dropdown
        populateSubcategory(categoryValue, '', 'sharedSubcategoryFilter');
        
        // Show/hide subcategory dropdown
        if (categoryValue) {
            subcategoryDropdown.classList.remove('hidden');
        } else {
            subcategoryDropdown.classList.add('hidden');
        }
        
        // Apply filters
        filterSets('shared-sets', categoryValue, '');
    });

    document.getElementById('sharedSubcategoryFilter').addEventListener('change', function() {
        const categoryValue = document.getElementById('sharedCategoryFilter').value;
        const subcategoryValue = this.value;
        
        // Apply filters
        filterSets('shared-sets', categoryValue, subcategoryValue);
    });

    // Cancel delete action
    document.getElementById('cancel-delete').onclick = () => {
        document.getElementById('confirmation-modal').classList.add('hidden');
    };
</script>

<% if (typeof sets !== 'undefined' && Array.isArray(sets)) { %>
    <% sets.forEach(function(set, index) { %>
        <script>
            document.addEventListener('DOMContentLoaded', function() {
                const setData = <%- JSON.stringify(set) %>;
                insertSet(
                    setData.setID, 
                    setData.setName, 
                    setData.category, 
                    setData.subCategory, 
                    setData.description, 
                    false
                );
            });
        </script>
    <% }); %>
<% } else { %>
    <script>
        console.log("No sets available to display");
    </script>
<% } %>

</html>
