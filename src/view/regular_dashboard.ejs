<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Flick | Dashboard</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="/js/color-scheme.js"></script>
    <script src="/js/categories.js"></script>
    <script>
        tailwind.config = window.tailwindConfig;
    </script>
</head>
<body class="p-4 bg-bg-light dark:bg-bg-dark min-h-screen">

<%- include('partials/header') %>

<div class="font-mono mt-7 text-2xl text-accent-light dark:text-accent-dark"> Welcome, <%= user.username %> </div>
<br />

<div id="user-cardsets" class="p-2 bg-surface-light dark:bg-surface-dark rounded-md border-2 border-accent-light dark:border-accent-dark">
    <div id="set-bar-user" class="flex items-center justify-between">
        <span class="font-mono text-2xl text-accent-light dark:text-accent-dark">My Card Sets</span>
        <div class="flex items-center space-x-2">
            <button onclick="window.location.href='/new_set'" class="relative group p-1">
                <img src="add.svg" alt="Plus Icon" class="w-9 h-9">
                <span class="absolute left-full ml-2 bg-primary-light dark:bg-primary-dark text-text-light dark:text-text-dark text-xs font-semibold px-2 py-1 rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 whitespace-nowrap">
                    New Card Set
                </span>
            </button>
            <input type="text" id="tagFilter" class="font-mono py-1.5 px-3 text-text-light dark:text-text-dark border-2 border-accent-light dark:border-accent-dark rounded-lg focus:outline-none shadow-sm bg-surface-light dark:bg-surface-dark placeholder:text-text-light dark:placeholder:text-text-dark" placeholder="Filter by tag">
        </div>
    </div>
    <hr class="border-accent-light dark:border-accent-dark mt-2">
    <div id="user-sets" class="inline p-2"></div>
</div>
<br />

<div id="shared-cardsets" class="p-2 bg-surface-light dark:bg-surface-dark rounded-md border-2 border-accent-light dark:border-accent-dark">
    <div id="set-bar-shared" class="flex items-center justify-between">
        <span class="font-mono text-2xl text-accent-light dark:text-accent-dark">Sets Shared with me</span><br />
        <input type="text" id="tagFilter" class="font-mono py-1.5 px-3 text-text-light dark:text-text-dark border-2 border-accent-light dark:border-accent-dark rounded-lg focus:outline-none shadow-sm bg-surface-light dark:bg-surface-dark placeholder:text-text-light dark:placeholder:text-text-dark" placeholder="Filter by tag">
    </div>
    <hr class="border-accent-light dark:border-accent-dark mt-2">
    <div id="shared-sets"></div>
</div>

<!-- Modal for deletion confirmation -->
<div id="confirmation-modal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 hidden">
    <div class="bg-surface-light dark:bg-surface-dark p-8 rounded-lg shadow-lg w-1/3 text-center">
        <p id="confirmation-message" class="text-lg font-mono text-accent-light dark:text-accent-dark mb-4"></p>
        <div class="flex justify-around">
            <button id="confirm-delete" class="bg-highlight-light dark:bg-highlight-dark text-text-light dark:text-text-dark p-2 rounded-md hover:bg-accent-light dark:hover:bg-accent-dark transition-colors">
                Yes
            </button>
            <button id="cancel-delete" class="bg-secondary-light dark:bg-secondary-dark text-text-light dark:text-text-dark p-2 rounded-md hover:bg-accent-light dark:hover:bg-accent-dark transition-colors">
                No
            </button>
        </div>
    </div>
</div>

<!-- Modal for share -->
<div id="share-modal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 hidden">
    <div class="bg-surface-light dark:bg-surface-dark p-8 rounded-lg shadow-lg w-1/3 text-center">
        <p id="share-message" class="text-lg font-mono text-accent-light dark:text-accent-dark mb-4">Share this set with a user:</p>
        <input id="username-input" type="text" placeholder="Enter username" class="font-mono py-1.5 px-3 text-text-light dark:text-text-dark border-2 border-accent-light dark:border-accent-dark rounded-lg focus:outline-none shadow-sm bg-surface-light dark:bg-surface-dark placeholder:text-text-light dark:placeholder:text-text-dark mb-4 w-full">
        <div class="flex justify-around">
            <button id="confirm-share" class="bg-highlight-light dark:bg-highlight-dark text-text-light dark:text-text-dark p-2 rounded-md hover:bg-accent-light dark:hover:bg-accent-dark transition-colors">
                Share
            </button>
            <button id="cancel-share" class="bg-secondary-light dark:bg-secondary-dark text-text-light dark:text-text-dark p-2 rounded-md hover:bg-accent-light dark:hover:bg-accent-dark transition-colors">
                Cancel
            </button>
        </div>
    </div>
</div>
<br />
</body>
</html>
<script>
    function handleShareButtonClick(setID) {
        document.getElementById('share-modal').classList.remove('hidden');

        // Set up the share button action
        document.getElementById('confirm-share').onclick = () => {
            const username = document.getElementById('username-input').value;
            if (username) {
                // Perform the share action (could be sending to backend or other logic)
                alert(`Set shared with ${username}`);
                document.getElementById('share-modal').classList.add('hidden');
            } else {
                alert('Please enter a username');
            }
        };

        // Cancel share action
        document.getElementById('cancel-share').onclick = () => {
            document.getElementById('share-modal').classList.add('hidden');
        };
    }

    // Function to insert a set into the DOM
    function insertSet(setID, setName, category, shared) {
        // Create the main div container for the set
        const setDiv = document.createElement('div');
        setDiv.className = 'inline-flex flex-col items-start bg-surface-light dark:bg-surface-dark p-4 border-2 border-accent-light dark:border-accent-dark rounded-md m-2';

        // Create and populate the set name section
        const setNameDiv = document.createElement('div');
        setNameDiv.className = 'flex items-center gap-2';

        // Set name display
        const setNameSpan = document.createElement('span');
        setNameSpan.className = 'font-mono font-bold text-accent-light dark:text-accent-dark';
        setNameSpan.textContent = setName;
        setNameDiv.appendChild(setNameSpan);

        // Play Button
        const playButton = document.createElement('button');
        playButton.className = 'relative group flex items-center justify-center p-1 bg-transparent hover:opacity-80 transition-opacity';
        playButton.onclick = () => { window.location.href = `/view_set?setID=${setID}`; };

        const playImg = document.createElement('img');
        playImg.src = 'play.svg';
        playImg.alt = 'Play Icon';
        playImg.className = 'w-6 h-6 filter dark:invert';
        playButton.appendChild(playImg);

        const playSpan = document.createElement('span');
        playSpan.className = 'absolute top-full left-1/2 -translate-x-1/2 mt-1 bg-black text-white text-xs font-semibold px-2 py-1 rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 whitespace-nowrap z-10';
        playSpan.textContent = 'Play Set';
        playButton.appendChild(playSpan);

        // Append Play Button beside the set name
        setNameDiv.appendChild(playButton);

        // Create the category section
        const categoryDiv = document.createElement('div');
        categoryDiv.className = 'flex items-center gap-2 mt-1';
        const categorySpan = document.createElement('span');
        categorySpan.className = 'bg-primary-light dark:bg-primary-dark text-accent-light dark:text-accent-dark px-2 py-1 rounded-md';
        categorySpan.textContent = getCategoryName(category);
        categoryDiv.appendChild(categorySpan);

        // Create the buttons section (Share, Edit, Delete)
        const buttonsDiv = document.createElement('div');
        buttonsDiv.className = 'flex items-center gap-2 justify-between mt-2 w-full';

        // Button base styling without border
        const buttonBaseClass = 'relative group flex items-center justify-center p-1 bg-transparent hover:opacity-80 transition-opacity';

        const shareButton = document.createElement('button');
        shareButton.className = buttonBaseClass;
        shareButton.onclick = () => {
            handleShareButtonClick(setID);
        };

        const shareImg = document.createElement('img');
        shareImg.src = 'share.svg';
        shareImg.alt = 'Share Icon';
        shareImg.className = 'w-6 h-6 filter dark:invert';
        shareButton.appendChild(shareImg);

        const shareSpan = document.createElement('span');
        shareSpan.className = 'absolute top-full left-1/2 -translate-x-1/2 mt-1 bg-black text-white text-xs font-semibold px-2 py-1 rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 whitespace-nowrap z-10';
        shareSpan.textContent = 'Share Set';
        shareButton.appendChild(shareSpan);

        // Edit Button
        const editButton = document.createElement('button');
        editButton.className = buttonBaseClass;
        editButton.onclick = () => { window.location.href = `/editSet?setID=${setID}`; };

        const editImg = document.createElement('img');
        editImg.src = 'edit.svg';
        editImg.alt = 'Edit Icon';
        editImg.className = 'w-6 h-6 filter dark:invert';
        editButton.appendChild(editImg);

        const editSpan = document.createElement('span');
        editSpan.className = 'absolute top-full left-1/2 -translate-x-1/2 mt-1 bg-black text-white text-xs font-semibold px-2 py-1 rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 whitespace-nowrap z-10';
        editSpan.textContent = 'Edit Set';
        editButton.appendChild(editSpan);

        // Delete Button
        const deleteButton = document.createElement('button');
        deleteButton.className = buttonBaseClass;
        deleteButton.onclick = () => {
            document.getElementById('confirmation-modal').classList.remove('hidden');
            document.getElementById('confirmation-message').textContent = `Do you want to delete the set "${setName}"?`;
            document.getElementById('confirm-delete').onclick = () => {
                window.location.href = `/deleteSet?setID=${setID}`;
            };
        };

        const deleteImg = document.createElement('img');
        deleteImg.src = 'delete.svg';
        deleteImg.alt = 'Delete Icon';
        deleteImg.className = 'w-6 h-6 filter dark:invert';
        deleteButton.appendChild(deleteImg);

        const deleteSpan = document.createElement('span');
        deleteSpan.className = 'absolute top-full left-1/2 -translate-x-1/2 mt-1 bg-black text-white text-xs font-semibold px-2 py-1 rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 whitespace-nowrap z-10';
        deleteSpan.textContent = 'Delete Set';
        deleteButton.appendChild(deleteSpan);

        // Append buttons to button container
        buttonsDiv.appendChild(shareButton);
        buttonsDiv.appendChild(editButton);
        buttonsDiv.appendChild(deleteButton);

        // Append everything to the main set div
        setDiv.appendChild(setNameDiv);
        setDiv.appendChild(categoryDiv);
        setDiv.appendChild(buttonsDiv);

        // Append to the correct container
        const container = shared ? document.getElementById('shared-sets') : document.getElementById('user-sets');
        container.appendChild(setDiv);
    }

    // Cancel delete action
    document.getElementById('cancel-delete').onclick = () => {
        document.getElementById('confirmation-modal').classList.add('hidden');
    };

    // Cancel delete action
    document.getElementById('cancel-delete').onclick = () => {
        document.getElementById('confirmation-modal').classList.add('hidden');
    };
</script>

<% if (typeof userSets !== 'undefined' && Array.isArray(userSets)) { %>
    <% userSets.forEach(function(set, index) { %>
        <script>
            const setData<%= index %> = '<%- JSON.stringify(set) %>';
            const parsedSet<%= index %> = JSON.parse(setData<%= index %>);
            insertSet(parsedSet<%= index %>.setID, parsedSet<%= index %>.setName, parsedSet<%= index %>.category, false);
        </script>
    <% }); %>
<% } else { %>
    <script>
        console.log("No sets available to display");
    </script>
<% } %>

<% if (typeof sharedSets !== 'undefined' && Array.isArray(sharedSets)) { %>
    <% sharedSets.forEach(function(set, index) { %>
        <script>
            const setData<%= index %> = '<%- JSON.stringify(set) %>';
            const parsedSet<%= index %> = JSON.parse(setData<%= index %>);
            insertSet(parsedSet<%= index %>.setID, parsedSet<%= index %>.setName, parsedSet<%= index %>.category, false);
        </script>
    <% }); %>
<% } else { %>
    <script>
        console.log("No sets available to display");
    </script>
<% } %>
<script>
    function toggleTheme() {
        if (document.documentElement.classList.contains('dark')) {
            document.documentElement.classList.remove('dark');
            localStorage.theme = 'light';
        } else {
            document.documentElement.classList.add('dark');
            localStorage.theme = 'dark';
        }
    }

    if (localStorage.theme === 'dark' || (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
        document.documentElement.classList.add('dark');
        document.getElementById('theme-toggle').checked = true;
    } else {
        document.documentElement.classList.remove('dark');
        document.getElementById('theme-toggle').checked = false;
    }
</script>
</html>
