<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Flick | Public Sets</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="/js/color-scheme.js"></script>
    <script src="/js/categories.js"></script>
    <script src="/js/status-handler.js"></script>
    <script>
        tailwind.config = window.tailwindConfig;
    </script>
    <style>
        .card {
            transform-style: preserve-3d;
            transition: transform 0.6s;
        }

        .card.flipped {
            transform: rotateY(180deg);
        }

        .card .front,
        .card .back {
            backface-visibility: hidden;
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
        }

        .card .back {
            transform: rotateY(180deg);
        }

        .nav-arrow {
            position: fixed;
            top: 50%;
            transform: translateY(-50%);
        }

        .nav-arrow.prev {
            left: 20px;
        }

        .nav-arrow.next {
            right: 20px;
        }
    </style>
</head>
<body class="p-4 bg-bg-light dark:bg-bg-dark min-h-screen">
<%- include('partials/header') %>
<%- include('partials/status-message') %>
<main class="container mx-auto py-8 px-4">
    <div class="grid grid-cols-1 md:grid-cols-12 gap-6">
        
        <div class="md:col-span-3">
            <div class="border-2 border-accent-light dark:border-accent-dark bg-surface-light dark:bg-surface-dark rounded-xl p-4 sticky top-24">
                <h3 class="text-xl font-bold text-accent-light dark:text-accent-dark mb-3 border-b-2 border-accent-light dark:border-accent-dark pb-2">Controls</h3>
                
                <div class="space-y-3">
                    <div class="flex items-center">
                        <div class="mr-3 bg-gray-200 dark:bg-gray-700 p-2 rounded">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-800 dark:text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                            </svg>
                        </div>
                        <span class="text-text-light dark:text-text-dark">Previous Card</span>
                    </div>
                    
                    <div class="flex items-center">
                        <div class="mr-3 bg-gray-200 dark:bg-gray-700 p-2 rounded">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-800 dark:text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                            </svg>
                        </div>
                        <span class="text-text-light dark:text-text-dark">Next Card</span>
                    </div>
                    
                    <div class="flex items-center">
                        <div class="mr-3 bg-gray-200 dark:bg-gray-700 p-2 rounded text-center text-sm">
                            <span class="text-gray-800 dark:text-white font-mono">Space</span>
                        </div>
                        <span class="text-text-light dark:text-text-dark">Flip Card</span>
                    </div>
                    
                    <div class="mt-4 text-sm text-text-light dark:text-text-dark bg-highlight-light dark:bg-highlight-dark bg-opacity-20 dark:bg-opacity-20 p-3 rounded">
                        <p class="italic">You must flip each card before proceeding to the next one.</p>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Main Content - Larger column -->
        <div class="md:col-span-9">
            <div class="border-2 border-accent-light dark:border-accent-dark bg-surface-light dark:bg-surface-dark rounded-xl p-6 shadow-custom transition-all duration-300 hover:shadow-lg">
                
                <div class="mb-6">
                    <h2 class="text-2xl font-bold text-accent-light dark:text-accent-dark mb-4 border-b-2 border-accent-light dark:border-accent-dark pb-2">Set Info</h2>
                    
                    <div class="bg-white dark:bg-gray-800 p-4 rounded-lg border border-gray-300 dark:border-gray-700">
                        <h3 class="font-mono text-2xl font-bold text-accent-light dark:text-accent-dark mb-2 text-left"><%= set.setName %></h3>
                        
                        <p class="text-text-light dark:text-text-dark mt-1 mb-3 text-left">
                            <%= set.description || "No description available" %>
                        </p>
                        
                        <div class="flex flex-wrap gap-2 mt-2">
                            <% if (set.category) { %>
                                <span class="bg-primary-light dark:bg-primary-dark text-text-light dark:text-text-dark px-2 py-1 rounded-md text-sm">
                                    Category: <span id="category-display"></span>
                                </span>
                            <% } %>
                            
                            <% if (set.subCategory) { %>
                                <span class="bg-secondary-light dark:bg-secondary-dark text-text-light dark:text-text-dark px-2 py-1 rounded-md text-sm">
                                    Subcategory: <span id="subcategory-display"><%= set.subCategory %></span>
                                </span>
                            <% } %>
                            
                            <span class="bg-highlight-light dark:bg-highlight-dark text-text-light dark:text-text-dark px-2 py-1 rounded-md text-sm">
                                Views: <span><%= set.views || 0 %></span>
                            </span>
                            
                            <% if (set.ownerID) { %>
                                <span class="bg-contrast-light dark:bg-contrast-dark text-text-light dark:text-text-dark px-2 py-1 rounded-md text-sm">
                                    Created by: <%= set.ownerID.username || set.ownerID.email || "Anonymous" %>
                                </span>
                            <% } %>
                        </div>
                    </div>
                </div>

                <!-- Cards Display Section -->
                <div class="mt-8 relative min-h-[16rem]">
                    <% if (typeof cards !== 'undefined' && cards && cards.length > 0) { %>
                        <% 
                            const isConfigured = options && 
                                            (options.shuffle !== undefined || 
                                             options.timed !== undefined || 
                                             options.timepercard !== undefined);
                            
                            if (isConfigured) { 
                        %>
                            <div id="prev-arrow" class="nav-arrow prev bg-gray-200 dark:bg-white bg-opacity-20 dark:bg-opacity-20 hover:bg-opacity-40 dark:hover:bg-opacity-40 p-5 rounded-full flex items-center justify-center cursor-pointer transition-all duration-300 opacity-0 pointer-events-none">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-gray-800 dark:text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                                </svg>
                            </div>
                            
                            <div id="next-arrow" class="nav-arrow next bg-gray-200 dark:bg-white bg-opacity-20 dark:bg-opacity-20 hover:bg-opacity-40 dark:hover:bg-opacity-40 p-5 rounded-full flex items-center justify-center cursor-pointer transition-all duration-300">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-gray-800 dark:text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                                </svg>
                            </div>
                            
                            <!-- Cards Container -->
                            <div id="cards-container" class="flex justify-center">
                                <% cards.forEach(function(card, index) { %>
                                    <div class="w-64 h-64 perspective-1000 card-slide <%= index === 0 ? '' : 'hidden' %>" data-index="<%= index %>">
                                        <div class="relative w-full h-full card cursor-pointer" id="card-<%= index %>">
                                            <!-- Front of Card -->
                                            <div class="front bg-yellow-200 dark:bg-purple-900 text-black dark:text-white rounded-lg p-4 flex flex-col">
                                                <!-- Timer display - only shown if timing is enabled -->
                                                <% if (options.timed === 'true' && options.timepercard) { %>
                                                <div class="absolute top-2 right-2 bg-white dark:bg-gray-700 rounded-full h-8 w-8 flex items-center justify-center shadow-md">
                                                    <span id="timer-<%= index %>" class="text-sm font-bold text-accent-light dark:text-accent-dark"><%= options.timepercard %></span>
                                                </div>
                                                <div class="card-content flex-grow overflow-y-auto pr-10 pb-1">
                                                <% } else { %>
                                                <div class="card-content flex-grow overflow-y-auto pb-1">
                                                <% } %>
                                                    <h3 class="text-text-light dark:text-text-dark font-mono font-semibold text-xl break-words">
                                                        <%= card.front_text %>
                                                    </h3>
                                                </div>
                                            </div>
                                            
                                            <!-- Back of Card -->
                                            <div class="back bg-green-200 dark:bg-teal-900 text-black dark:text-white rounded-lg p-4 flex flex-col">
                                                <div class="card-content flex-grow overflow-y-auto">
                                                    <h3 class="text-text-light dark:text-text-dark font-mono font-semibold text-lg mb-2">
                                                        Answer:</h3>
                                                    <p class="text-text-light dark:text-text-dark font-mono font-semibold text-lg break-words">
                                                        <%= card.back_text %>
                                                    </p>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                <% }); %>
                            </div>
                    
                            <br />
                            <!-- Progress Bar -->
                            <div class="w-full bg-gray-200 rounded-full h-2.5 mb-6 dark:bg-gray-700">
                                <div id="progress-bar" class="bg-accent-light dark:bg-accent-dark h-2.5 rounded-full transition-all duration-300" style="width: 0%"></div>
                            </div>
                            
                            <!-- Card Counter -->
                            <div class="text-center mb-4">
                                <span id="card-counter" class="text-text-light dark:text-text-dark font-medium"></span>
                            </div>

                            <!-- End Session Options -->
                            <div id="end-session-options" class="hidden text-center py-8">
                                <h3 class="text-2xl font-bold text-accent-light dark:text-accent-dark mb-4">Practice Session Complete!</h3>
                                <div class="flex justify-center gap-4 mt-6">
                                    <button id="retry-button" class="border-2 rounded-xl px-8 py-3 bg-primary-light dark:bg-primary-dark text-text-light dark:text-text-dark font-bold hover:bg-highlight-light dark:hover:bg-highlight-dark transition-all duration-200 transform hover:scale-105">
                                        Retry
                                    </button>
                                    <button id="end-session-button" class="border-2 rounded-xl px-8 py-3 bg-contrast-light dark:bg-contrast-dark text-text-light dark:text-text-dark font-bold hover:bg-highlight-light dark:hover:bg-highlight-dark transition-all duration-200 transform hover:scale-105">
                                        End Practice Session
                                    </button>
                                </div>
                            </div>
                        <% } else { %>
                            <!-- Configuration Form (shown when options aren't defined) -->
                            <div class="bg-white dark:bg-gray-800 p-6 rounded-lg border border-gray-300 dark:border-gray-700">
                                <h3 class="text-xl font-bold text-accent-light dark:text-accent-dark mb-4">Practice Options</h3>
                                
                                <form id="play-set-form" class="space-y-4">
                                    <input type="hidden" name="setID" value="<%= set.setID %>">
                                    <input type="hidden" name="set_type" value="<%= set_type %>">
                                    
                                    <div class="flex items-center gap-3">
                                        <input type="checkbox" id="shuffle" checked class="w-4 h-4 accent-primary-light dark:accent-primary-dark">
                                        <label for="shuffle" class="text-text-light dark:text-text-dark">Shuffle Cards</label>
                                    </div>
                                    
                                    <div class="flex items-center gap-3">
                                        <input type="checkbox" id="timed" class="w-4 h-4 accent-primary-light dark:accent-primary-dark" onchange="toggleTimedOptions()">
                                        <label for="timed" class="text-text-light dark:text-text-dark">Timed Mode</label>
                                    </div>
                                    
                                    <div id="timepercard-container" class="flex items-center gap-3 hidden">
                                        <input type="number" id="timepercard" min="1" max="120" value="10" class="border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-text-light dark:text-text-dark px-3 py-2 rounded-md w-24">
                                        <label for="timepercard" class="text-text-light dark:text-text-dark">Seconds per Card</label>
                                    </div>
                                    
                                    <div class="flex justify-center mt-6">
                                        <button type="button" onclick="startPracticeSession()" class="border-2 rounded-xl px-8 py-3 bg-primary-light dark:bg-primary-dark text-text-light dark:text-text-dark font-bold hover:bg-highlight-light dark:hover:bg-highlight-dark transition-all duration-200 transform hover:scale-105">
                                            Start Practice Session
                                        </button>
                                    </div>
                                </form>
                            </div>
                        <% } %>
                    <% } else { %>
                        <div class="text-center py-10">
                            <p class="text-xl font-semibold text-accent-light dark:text-accent-dark">No Cards in this Set</p>
                            <p class="text-text-light dark:text-text-dark mt-2">This flashcard set doesn't contain any cards yet.</p>
                            <button onclick="window.location.href='/'" class="mt-6 border-2 rounded-xl px-8 py-3 bg-contrast-light dark:bg-contrast-dark text-text-light dark:text-text-dark font-bold hover:bg-highlight-light dark:hover:bg-highlight-dark transition-all duration-200 transform hover:scale-105">
                                Return Home
                            </button>
                        </div>
                    <% } %>
                </div>
            </div>
        </div>
    </div>
</main>

<script>
    
    function startPracticeSession() {
        const setID = document.querySelector('input[name="setID"]').value;
        const setType = document.querySelector('input[name="set_type"]').value || 'user';
        const shuffle = document.getElementById('shuffle').checked;
        const timed = document.getElementById('timed').checked;
        const timepercard = document.getElementById('timepercard').value || 0;
        
        let url = `/play_set?setID=${setID}&set_type=${setType}`;
        if (shuffle) url += '&shuffle=true';
        if (timed) url += '&timed=true';
        if (timepercard > 0) url += `&timepercard=${timepercard}`;
        
        window.location.href = url;
    }

    
    function toggleTimedOptions() {
        const timedCheckbox = document.getElementById('timed');
        const timeContainer = document.getElementById('timepercard-container');
        const timeInput = document.getElementById('timepercard');
        
        if (timedCheckbox.checked) {
            timeContainer.classList.remove('hidden');
            timeInput.required = true;
        } else {
            timeContainer.classList.add('hidden');
            timeInput.required = false;
        }
    }

    document.addEventListener('DOMContentLoaded', function () {
        
        const categoryNames = <%- JSON.stringify(categoryNames || {}) %>;
        const category_display = document.getElementById('category-display');
        const category = <%- JSON.stringify(set?.category || '') %>;
        
        if (category_display && category) {
            category_display.innerText = getCategoryName(category, categoryNames);
        }

        
        const options = <%- JSON.stringify(options || {}) %>;
        const isConfigured = options && (options.shuffle !== undefined || options.timed !== undefined || options.timepercard !== undefined);
        
        if (!isConfigured) return;
        
        
        const cards = <%- JSON.stringify(cards || []) %>;
        const totalCards = cards.length;
        if (totalCards === 0) return;

        let currentCardIndex = 0;
        const cardSlides = document.querySelectorAll('.card-slide');
        const cardCounter = document.getElementById('card-counter');
        const progressBar = document.getElementById('progress-bar');
        const prevArrow = document.getElementById('prev-arrow');
        const nextArrow = document.getElementById('next-arrow');
        const endSessionOptions = document.getElementById('end-session-options');
        
        
        let currentCardFlipped = false;
        
        
        let timerInterval = null;
        let timeLeft = parseInt(options.timepercard) || 0;
        const isTimed = options.timed === 'true' && timeLeft > 0;
        
        
        function startTimer() {
            if (!isTimed) return;
            
            
            if (timerInterval) {
                clearInterval(timerInterval);
            }
            
            
            timeLeft = parseInt(options.timepercard);
            
            
            const timerElement = document.getElementById(`timer-${currentCardIndex}`);
            if (timerElement) {
                timerElement.textContent = timeLeft;
            }
            
            
            timerInterval = setInterval(function() {
                timeLeft--;
                
                
                if (timerElement) {
                    timerElement.textContent = timeLeft;
                    
                    
                    if (timeLeft <= 5) {
                        timerElement.classList.add('text-red-500');
                    } else {
                        timerElement.classList.remove('text-red-500');
                    }
                }
                
                
                if (timeLeft <= 0) {
                    clearInterval(timerInterval);
                    const currentCard = document.querySelector(`.card-slide[data-index="${currentCardIndex}"] .card`);
                    if (currentCard && !currentCard.classList.contains('flipped')) {
                        currentCard.classList.add('flipped');
                        currentCardFlipped = true;
                        updateProgress();
                    }
                }
            }, 1000);
        }
        
        
        function updateProgress() {
            cardCounter.textContent = `Card ${currentCardIndex + 1} of ${totalCards}`;
            const progressPercentage = ((currentCardIndex + 1) / totalCards) * 100;
            progressBar.style.width = `${progressPercentage}%`;

            
            prevArrow.classList.toggle('opacity-0', currentCardIndex === 0);
            prevArrow.classList.toggle('pointer-events-none', currentCardIndex === 0);
            
            
            if (currentCardIndex === totalCards - 1) {
                
                if (currentCardFlipped) {
                    nextArrow.classList.add('opacity-0', 'pointer-events-none');
                    setTimeout(() => {
                        endSessionOptions.classList.remove('hidden');
                    }, 500);
                }
            } else {
                
                if (currentCardFlipped) {
                    nextArrow.classList.remove('opacity-0', 'pointer-events-none');
                } else {
                    nextArrow.classList.add('opacity-0', 'pointer-events-none');
                }
                endSessionOptions.classList.add('hidden');
            }
        }

        
        function showCard(index) {
            cardSlides.forEach((slide, i) => {
                if (i === index) {
                    slide.classList.remove('hidden');
                } else {
                    slide.classList.add('hidden');
                }
            });
            
            
            currentCardFlipped = false;
            
            
            const currentCard = document.querySelector(`.card-slide[data-index="${currentCardIndex}"] .card`);
            if (currentCard && currentCard.classList.contains('flipped')) {
                currentCard.classList.remove('flipped');
            }
            
            
            if (isTimed) {
                startTimer();
            }
            
            updateProgress();
        }

        
        updateProgress();
        if (isTimed) {
            startTimer();
        }

        
        cardSlides.forEach(slide => {
            const card = slide.querySelector('.card');
            if (card) {
                card.addEventListener('click', function() {
                    
                    if (this.classList.contains('flipped')) return;
                    
                    this.classList.add('flipped');
                    
                    
                    currentCardFlipped = true;
                    
                    
                    if (timerInterval) {
                        clearInterval(timerInterval);
                    }
                    
                    
                    updateProgress();
                });
            }
        });

        
        prevArrow.addEventListener('click', function() {
            if (currentCardIndex > 0) {
                
                if (timerInterval) {
                    clearInterval(timerInterval);
                }
                
                currentCardIndex--;
                showCard(currentCardIndex);
            }
        });

        nextArrow.addEventListener('click', function() {
            
            if (currentCardFlipped && currentCardIndex < totalCards - 1) {
                
                if (timerInterval) {
                    clearInterval(timerInterval);
                }
                
                currentCardIndex++;
                showCard(currentCardIndex);
            }
        });

        
        document.getElementById('retry-button').addEventListener('click', function() {
            const urlParams = new URLSearchParams(window.location.search);
            const setID = urlParams.get('setID');
            const setType = urlParams.get('set_type') || 'user';
            
            
            let newUrl = `/play_set?setID=${setID}&set_type=${setType}`;
            
            
            const options = <%- JSON.stringify(options || {}) %>;
            
            if (options.shuffle === 'true') {
                newUrl += '&shuffle=true';
            }
            
            if (options.timed === 'true') {
                newUrl += '&timed=true';
            }
            
            if (options.timepercard) {
                newUrl += `&timepercard=${options.timepercard}`;
            }
            
            
            window.location.href = newUrl;
        });

        document.getElementById('end-session-button').addEventListener('click', function() {
            window.location.href = '/';
        });

        
        document.addEventListener('keydown', function(e) {
            if (e.key === 'ArrowLeft') {
                prevArrow.click();
            } else if (e.key === 'ArrowRight' && currentCardFlipped) {
                
                nextArrow.click();
            } else if (e.key === ' ' || e.key === 'Spacebar') {
                
                const currentCard = document.querySelector(`.card-slide[data-index="${currentCardIndex}"] .card`);
                if (currentCard && !currentCard.classList.contains('flipped')) {
                    currentCard.classList.add('flipped');
                    currentCardFlipped = true;
                    
                    
                    if (timerInterval) {
                        clearInterval(timerInterval);
                    }
                    
                    updateProgress();
                }
                e.preventDefault(); 
            }
        });
    });
</script>

</body>
</html>
